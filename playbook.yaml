- name: Jupyter R Deployment
  hosts: all
  gather_facts: false
  tasks:
    # - name: Rescan host key
    #   local_action: command ssh-keygen -R {{ inventory_hostname }}
    #- name: update host keys
    #  known_hosts:
    #    name: "{{ inventory_hostname }}"
    #    state: absent
    - name: Install pip
      become: yes
      apt:
        name: python3-pip
        update_cache: yes
    - name: Install Jupyter
      pip:
        name: jupyter
        executable: pip3


    # Install R and R jupyter kernel
    - name: Import R public key
      apt_key:
        id: 51716619E084DAB9
        keyserver: keyserver.ubuntu.com
      #command: apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 51716619E084DAB9
      become: yes
    - name: Add R Repo
      become: yes
      apt_repository:
        repo: deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/
        state: present
    - name: Install R
      become: yes
      apt:
        name: r-base
        update_cache: yes
    - name: Create R library
      file:
        path: ~/.local/lib/R
        state: directory
    - name: Add library path to environment
      lineinfile:
        path: ~/.profile
        line: export R_LIBS_USER=~/.local/lib/R
    - name: Add ~/.local/bin to PATH
      lineinfile:
        path: ~/.profile
        line: 'export PATH=~/.local/bin:$PATH'

    # - name: Add jupyter-start.sh script to remote path
    #   copy:
    #     src: jupyter-start.sh
    #     dest: ~/.local/bin/jupyter-start.sh
    #     mode: u=rwx,g=r

    - debug:
        msg: Installing the jupyter R kernel takes a while as it must build some code
    - name: Install R jupyter kernel
      shell: source ~/.profile && R -e "install.packages('IRkernel')"
      args:
        executable: /bin/bash
    - name: Initialize R kernel
      shell: source ~/.profile && R -e "IRkernel::installspec()"
      args:
        executable: /bin/bash

    # Some additional jupyter setup
    - name: Create jupyter notebook dir
      file:
        path: ~/notebook-dir
        state: directory
    - name: Create jupyter conf dir
      file:
        path: ~/.jupyter
        state: directory
    - name: Create jupyter token
      # note: overwrites entire file contents, could switch to lineinfile
      copy:
        content: "c.NotebookApp.token = '{{ jupyter_token }}'"
        dest: ~/.jupyter/jupyter_notebook_config.py


    # Set up nginx
    - name: Install nginx
      become: yes
      apt:
        name: nginx
    - name: Start and enable nginx
      become: yes
      shell: systemctl enable nginx && systemctl start nginx
    - name: Create self-signed certificate
      become: yes
      command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /root/nginx-key.pem -out /root/nginx-cert.pem -subj "/CN={{ inventory_hostname }}"
      args:
        creates: /root/nginx-cert.pem
    - name: Create NGINX host for jupyter
      become: yes
      copy:
        src: jupyter.conf
        dest: /etc/nginx/conf.d/jupyter.conf
    - name: Remove default NGINX sites
      become: yes
      lineinfile:
        path: /etc/nginx/nginx.conf
        regexp: '\s*include \/etc\/nginx\/sites-enabled'
        state: absent
    - name: Reload NGINX
      become: yes
      command: nginx -s reload

    # Set up SystemD

    # - name: Create user systemd directory
    #   file:
    #     path: ~/.config/systemd/user/
    #     state: directory
    - name: Install jupyter systemd service
      become: yes
      template:
        src: jupyter.service
        dest: /etc/systemd/system/jupyter.service
        #dest: ~/.config/systemd/user/jupyter.service
    - name: Create jupyter conf file
      template:
        src: jupyter_notebook_config.py
        dest: ~/.jupyter/
    - name: Reload systemd
      become: yes
      command: systemctl daemon-reload
    - name: Enable jupyter service
      become: yes
      shell: systemctl enable jupyter
    - name: Start jupyter service
      become: yes
      shell: systemctl restart jupyter
    - name: Open iptables port 443/tcp
      become: yes
      #shell: iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: '443'
        jump: ACCEPT